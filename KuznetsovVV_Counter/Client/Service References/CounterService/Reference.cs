//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.CounterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterIndicationData", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial struct CounterIndicationData : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CounterKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IndicationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeasureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountKey {
            get {
                return this.AccountKeyField;
            }
            set {
                if ((this.AccountKeyField.Equals(value) != true)) {
                    this.AccountKeyField = value;
                    this.RaisePropertyChanged("AccountKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CounterKey {
            get {
                return this.CounterKeyField;
            }
            set {
                if ((this.CounterKeyField.Equals(value) != true)) {
                    this.CounterKeyField = value;
                    this.RaisePropertyChanged("CounterKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IndicationId {
            get {
                return this.IndicationIdField;
            }
            set {
                if ((this.IndicationIdField.Equals(value) != true)) {
                    this.IndicationIdField = value;
                    this.RaisePropertyChanged("IndicationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Measure {
            get {
                return this.MeasureField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureField, value) != true)) {
                    this.MeasureField = value;
                    this.RaisePropertyChanged("Measure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CounterService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddIndication", ReplyAction="http://tempuri.org/IService/AddIndicationResponse")]
        string AddIndication(int accountKey, int counterKey, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddIndication", ReplyAction="http://tempuri.org/IService/AddIndicationResponse")]
        System.Threading.Tasks.Task<string> AddIndicationAsync(int accountKey, int counterKey, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIndicationsThroughAccount", ReplyAction="http://tempuri.org/IService/GetIndicationsThroughAccountResponse")]
        Client.CounterService.CounterIndicationData[] GetIndicationsThroughAccount(int accountKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIndicationsThroughAccount", ReplyAction="http://tempuri.org/IService/GetIndicationsThroughAccountResponse")]
        System.Threading.Tasks.Task<Client.CounterService.CounterIndicationData[]> GetIndicationsThroughAccountAsync(int accountKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIndicationsThroughDate", ReplyAction="http://tempuri.org/IService/GetIndicationsThroughDateResponse")]
        Client.CounterService.CounterIndicationData[] GetIndicationsThroughDate(System.DateTime begin, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIndicationsThroughDate", ReplyAction="http://tempuri.org/IService/GetIndicationsThroughDateResponse")]
        System.Threading.Tasks.Task<Client.CounterService.CounterIndicationData[]> GetIndicationsThroughDateAsync(System.DateTime begin, System.DateTime end);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.CounterService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.CounterService.IService>, Client.CounterService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddIndication(int accountKey, int counterKey, int value) {
            return base.Channel.AddIndication(accountKey, counterKey, value);
        }
        
        public System.Threading.Tasks.Task<string> AddIndicationAsync(int accountKey, int counterKey, int value) {
            return base.Channel.AddIndicationAsync(accountKey, counterKey, value);
        }
        
        public Client.CounterService.CounterIndicationData[] GetIndicationsThroughAccount(int accountKey) {
            return base.Channel.GetIndicationsThroughAccount(accountKey);
        }
        
        public System.Threading.Tasks.Task<Client.CounterService.CounterIndicationData[]> GetIndicationsThroughAccountAsync(int accountKey) {
            return base.Channel.GetIndicationsThroughAccountAsync(accountKey);
        }
        
        public Client.CounterService.CounterIndicationData[] GetIndicationsThroughDate(System.DateTime begin, System.DateTime end) {
            return base.Channel.GetIndicationsThroughDate(begin, end);
        }
        
        public System.Threading.Tasks.Task<Client.CounterService.CounterIndicationData[]> GetIndicationsThroughDateAsync(System.DateTime begin, System.DateTime end) {
            return base.Channel.GetIndicationsThroughDateAsync(begin, end);
        }
    }
}
